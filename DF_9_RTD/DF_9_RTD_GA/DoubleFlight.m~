% ?Rahul Kala, IIIT Allahabad, Creative Commons Attribution-ShareAlike 4.0 International License. 
% The use of this code, its parts and all the materials in the text; creation of derivatives and their publication; and sharing the code publically is permitted without permission. 
% Please cite the work in all materials as: R. Kala (2014) Code for Robot Path Planning using Genetic Algorithms, Indian Institute of Information Technology Allahabad, Available at: http://rkala.in/codes.html
clear
clc
global map source goal noOfFlights noOfDimensions splineSmoothing


map = ones(400,400,200);
noOfFlights = 2;
noOfDimensions = 3;


source=[50 50 100;
        50 350 100;]; % source position in X, Y Z format
goal=[350 250 200;
      350 50 200;]; % goal position in X, Y Z format
  
currentPos = source;
unitVecToGoal = zeros(noOfFlights,noOfDimensions);
goalReached = zeros(noOfFlights,1);
  
stepSize = 50;

safeRange = 100;

acceptRadius = 50;

stepNo = 1;

pathX(:,stepNo) = source(:,1);
pathY(:,stepNo) = source(:,2);
pathZ(:,stepNo) = source(:,3);

for i = 1:noOfFlights
    disturbFromFlight = i;
    currentPos(i,:) = [pathX(i,end),pathY(i,end),pathZ(i,end)];
    if(DistanceCostDF(currentPos(i,:),goal(i,:))) < acceptRadius
        pathX(i,stepNo) = goal(i,1);
        pathY(i,stepNo) = goal(i,2);
        pathZ(i,stepNo) = goal(i,3);
        goalReached(i) = 1;
        continue;
    else
        unitVecToGoal(i) = unitVec(currentPos(i,:),goal(i,:));
        desiredPosNextStep = currentPos(i,:) + stepSize * unitVecToGoal(i);
        while disturbFromFlight ~= 0
            disturbFromFlight = i;
            for j = 1:noOfFlights
                if j~=i
                    if horizenDist(desiredPosNextStep,currentPos(j,:)) < safeRange
                        disturbFromFlight = j;
                        break;
                    end
                end
            end
            if disturbFromFlight  == i
                disturbFromFlight = 0;
            else
                
            end
        end
    end
    
end



splineSmoothing=true; % use spline based smoothing. the code has a dependence on the resoultion, and may be set to false if large changes in resolution are made.

%%%%% parameters end here %%%%%

tic;
for i = 1:noOfFlights
    if ~feasiblePointDF(source(i,:),map), error('source lies on an obstacle or outside map'); end
    if ~feasiblePointDF(goal(i,:),map), error('goal lies on an obstacle or outside map'); end
end



% currently the lower bounds and upper bounds are taken as 0 and 1 respectively, 
% these would be re-scaled in phenotype generation to ensure that they lie inside map. 

disp('click/press any key');
waitforbuttonpress; 
% if PathCostGADF(solution)>size(map,1)*size(map,2)*size(map,3) % indicating an infeasible path due to large cost due to penalties
%     error('no path found');
% end
fprintf('processing time=%d \nPath Length=%d \n\n', toc,cost);

figure(2)
pathsp = [];
for i = 1:noOfFlights
    path = [source(i,:); [solution(3*i-2:noOfFlights*noOfDimensions:end)'*size(map,1) solution(3*i-1:noOfFlights*noOfDimensions:end)'*size(map,2) solution(3*i:noOfFlights*noOfDimensions:end)'*size(map,3)]; goal(i,:)]; % souce and goal is fixed. other points are from the GA individual representation
%     pathsp(:,:,i) =path;
    if splineSmoothing
       pathsp(:,:,i)=bsp(path); % a point based specification of path is smoothed by using splines
    end
    plot3(source(:,1),source(:,2),source(:,3),'*')
    plot3(goal(:,1),goal(:,2),goal(:,3),'o')
    hold on
%     plot3(pathsp(:,1),pathsp(:,2),pathsp(:,3),'-')
%     comet3(pathsp(:,1),pathsp(:,2),pathsp(:,3))
    hold on
end



